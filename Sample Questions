 1)Given two numbers  and . Swap  and  without using airthmetic operator and without using third variable.
 solution)
 a=a^b;
 b=a^b;
 a=a^b;
 
 2)Given below Strings
No of Strings:6
31415926535897932384626433832795
1
3
10
3
5
Sort in ascending order.

Solution)
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String[] unsorted = new String[n];
        for(int unsorted_i=0; unsorted_i < n; unsorted_i++){
            unsorted[unsorted_i] = in.next();
        }
       Arrays.sort(unsorted,new Comparator<String>() {
            @Override
            public int compare(String a, String b) 
            {
                return StringAsIntegerCompare(a,b);
            }
        });
        
        
===>
Consider an array of n integers, numbers. We define a non-unique value of numbers to be an integer that appears at least twice in the array. For example, if numbers = [1, 1, 2, 2, 2, 3, 4, 3, 9], then there are a total of 3 non-unique values in the array (i.e., 1, 2, and 3).

 

Complete the countDuplicates function in the editor below. It has 1 parameter: an array of integers, numbers. It must return an integer denoting the number of non-unique values in the numbers array.

 

Input Format

Locked stub code in the editor reads the following input from stdin and passes it to the function:

The first line contains an integer, n, denoting the size of the numbers array.

Each line i of the n subsequent lines (where 0 ≤ i < n) contains an integer describing the value of numbersi.

 

Constraints
•1 ≤ n ≤ 1000
•1 ≤ numbersi ≤ 1000

        
        for(int i=0;i<unsorted.length;i++)
        System.out.println(unsorted[i]);
    }
    
    public static int StringAsIntegerCompare(String s1,String s2)
    {
         if(s1.length() > s2.length()) return 1;
        if(s1.length() < s2.length()) return -1;
        for(int i = 0; i < s1.length(); i++)
        {
            if((int)s1.charAt(i) > (int)s2.charAt(i)) return 1;
            if((int)s1.charAt(i) < (int)s2.charAt(i)) return -1;
        }
        return 0;
    }
}

3)https://www.hackerrank.com/contests/projecteuler/challenges/euler013
